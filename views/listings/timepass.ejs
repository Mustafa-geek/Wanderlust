

//listings

router.get("/listings",wrapAsync( async (req,res) =>{   //index route
    let ans = await Listing.find({})
     res.render("listings/index.ejs",{ans})
}))
  
//put this route above listings/:id otherwise /new will be considered as :id
router.get("/listings/new",(req,res)=>{
     res.render("listings/new.ejs")
})
 
router.get("/listings/:id",wrapAsync(async (req,res)=>{ //jo lstng pe click kare uski puri info dena id pakadke (show route)
     let {id} = req.params;
     let ans = await Listing.findById(id).populate("review");
     res.render("listings/show.ejs",{ans})
}))
 
 
//Saving the filled form as a listing in the db 
router.post("/listings",validateListing , wrapAsync(async (req,res,next)=>{
     //let{title,description,image,place,}=req.body
     //let ans = req.body.listing
 
     // if(!req.body.listing){        //agar listing ka data send kare so sahi nhi kare toh apan defined custom err send karre
     //     throw new ExpressError(400,"Send Valid Data For listing")
     // }
 
     const ans = new Listing(req.body.listing) //creating an instance
     await ans.save()
     res.redirect("/listings")
}));
 

//EDIT Route
router.get("/listings/:id/edit",wrapAsync( async (req,res) =>{
     let {id} = req.params;
     const ans = await Listing.findById(id)
     res.render("listings/edit.ejs",{ans})
}))
 
//after clking edit btn, changes are made
router.put("/listings/:id" ,validateListing , wrapAsync(async(req,res) =>{
     
     // if(!req.body.listing){        //agar listing ka data send kare so sahi nhi kare toh apan defined custom err send karre
     //     throw new ExpressError(400,"Send Valid Data For listing")
     // }
 
     let {id} = req.params;
     await Listing.findByIdAndUpdate(id,{...req.body.listing})  //jo bhi nayi req.body aayi na usku wo id waale cheez se update kardo
     // console.log(req.body.listing)
     res.redirect(`/listings/${id}`)
}))
 
//Delte ROute
router.delete("/listings/:id",wrapAsync( async(req,res)=>{ //triggers middleware in listing.js
     let {id} = req.params;
     let ans = await Listing.findByIdAndDelete(id);
     console.log(ans) //deleted listing
     res.redirect("/listings")
}));
 
 


























//Reviews
//Post review
app.post("/listings/:id/reviews", validatereview, wrapAsync(async(req,res)=>{
   
  let listing = await Listing.findById(req.params.id);
  let newReview = new Review(req.body.review)   // Creating an instance from review.js aur backend se wo review obj ku jo show.ejs mei hai

   listing.review.push(newReview) ///pushing into review array that has been added in the listing schema (see listing.js)

    await newReview.save()
    await listing.save()
    res.redirect(`/listings/${listing._id}`)

}))

// Delete review
app.delete("/listings/:id/reviews/:reviewId", wrapAsync(async(req,res)=>{
   let {id , reviewId} = req.params;
   await Listing.findByIdAndUpdate(id, {$pull: {review : reviewId}})    // wo waale listing ke id ke andar jaake pull karo review array(listing.js) mei se wo waali reviewId ku 
   await  Review.findByIdAndDelete(reviewId);
   res.redirect(`/listings/${id}`)
}));
















// app.get("/testListing" ,async (req,res)=>{
    //     let tp = new Listing({
    //         title:"MY new Villa",
    //         description:"By the Beach",
    //         price:1200,
    //         location:"Calangute,Goa",
    //         country:"India",
    //     })
    
    //   await tp.save();
    //     console.log("doc saved")
    //     res.send("working this")
    
    // })
